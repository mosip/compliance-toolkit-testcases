[
	{
		"testCaseType": "ABIS",
		"testName": "Insert one person\"s biomterics in ABIS",
		"testId": "ABIS3000",
		"specVersion": "0.9.0",
		"testDescription": "Insert one person\"s biomterics in ABIS",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertRequestSchema"
		],
		"responseSchema": [
			"InsertResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Insert two person\"s biomterics in ABIS",
		"testId": "ABIS3001",
		"specVersion": "0.9.0",
		"testDescription": "Insert two person\"s biomterics in ABIS",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertRequestSchema"
		],
		"responseSchema": [
			"InsertResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": true,
			"insertCount": "2"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request structure",
		"testId": "ABIS3002",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Insert request - request json structure is invalid",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"invalidRequestAttribute": "newUnknownValue",
			"expectedFailureReason": "4"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - missing referenceId",
		"testId": "ABIS3003",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Insert request - missing referenceId",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"invalidRequestAttribute": "referenceId",
			"expectedFailureReason": "5"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - missing requestId",
		"testId": "ABIS3004",
		"specVersion": "0.9.0",
		"inactive": true,
		"testDescription": "Invalid Insert request - missing requestId",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"invalidRequestAttribute": "requestId",
			"expectedFailureReason": "6"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Unable to fetch biometric details using referenceURL",
		"testId": "ABIS3005",
		"specVersion": "0.9.0",
		"inactive": false,
		"testDescription": "Unable to fetch biometric details using referenceURL",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"invalidRequestAttribute": "incorrectReferenceURL",
			"expectedFailureReason": "7"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - Invalid reference url",
		"testId": "ABIS3006",
		"specVersion": "0.9.0",
		"inactive": false,
		"testDescription": "Invalid Insert request - Invalid reference url",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"invalidRequestAttribute": "invalidReferenceURL",
			"expectedFailureReason": "7"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - missing reference URL",
		"testId": "ABIS3007",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Insert request - missing reference URL",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"invalidRequestAttribute": "referenceURL",
			"expectedFailureReason": "8"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - missing request time",
		"testId": "ABIS3008",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Insert request - missing request time",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"invalidRequestAttribute": "requesttime",
			"expectedFailureReason": "9"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - referenceId already exists ",
		"testId": "ABIS3009",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Insert request - referenceId already exists ",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": true,
			"insertCount": "2",
			"insertReferenceId": "ABIS3009",
			"expectedFailureReason": "10"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - CBEFF has no data",
		"testId": "ABIS3010",
		"specVersion": "0.9.0",
		"testDescription": "CBEFF has no data /No biometric available for deduplication",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"expectedFailureReason": "11"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - invalid version",
		"testId": "ABIS3011",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Insert request - invalid version",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"invalidRequestAttribute": "version",
			"expectedFailureReason": "13"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - invalid id",
		"testId": "ABIS3012",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Insert request - invalid id",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"invalidRequestAttribute": "invalidId",
			"expectedFailureReason": "14"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - invalid request time format",
		"testId": "ABIS3013",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Insert request - invalid request time format",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"invalidRequestAttribute": "invalidRequestTime",
			"expectedFailureReason": "15"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - invalid CBEFF format",
		"testId": "ABIS3014",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Insert request - invalid CBEFF format",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"expectedFailureReason": "16"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - data share URL has expired",
		"testId": "ABIS3015",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Insert request - data share URL has expired",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"invalidRequestAttribute": "expireDataShareUrl",
			"expectedFailureReason": "17"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - invalid data",
		"testId": "ABIS3016",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Insert request - invalid data",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"expectedFailureReason": "11"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Insert request - CBEFF data decryption failure",
		"testId": "ABIS3017",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Insert request - CBEFF data decryption failure",
		"isNegativeTestcase": false,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertInvalidRequestSchema"
		],
		"responseSchema": [
			"InsertErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"invalidRequestAttribute": "incorrectPartnerId",
			"expectedFailureReason": "11"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Identify - duplicate found for the referenceId against gallery",
		"testId": "ABIS3018",
		"specVersion": "0.9.0",
		"testDescription": "Insert same biometrics multiple times, then test if duplicate is found for the referenceId against gallery",
		"isNegativeTestcase": false,
		"methodName": [
			"insert",
			"identify"
		],
		"requestSchema": [
			"InsertRequestSchema",
			"IdentifyRequestSchema"
		],
		"responseSchema": [
			"InsertResponseSchema",
			"IdentifyResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				}
			],
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "IdentifyDuplicateFoundValidator",
					"description": "Validates the count of duplicates found by ABIS for the given referenceId"
				},
				{
					"name": "ExpectedDuplicateCountValidator",
					"description": "Validates the duplicates found to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": true,
			"insertCount": "3",
			"expectedDuplicateCount": "1",
			"identifyReferenceId": "ABIS3018_1",
			"identifyGalleryIds": [
				"ABIS3018_2",
				"ABIS3018_3"
			]
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Identify request structure",
		"testId": "ABIS3019",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Identify request - request json structure is invalid",
		"isNegativeTestcase": false,
		"methodName": [
			"identify"
		],
		"requestSchema": [
			"IdentifyInvalidRequestSchema"
		],
		"responseSchema": [
			"IdentifyErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"invalidRequestAttribute": "newUnknownValue",
			"expectedFailureReason": "4",
			"identifyReferenceId": "ABIS3019_identify"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Identify request - missing referenceId",
		"testId": "ABIS3020",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Identify request - missing referenceId",
		"isNegativeTestcase": false,
		"methodName": [
			"identify"
		],
		"requestSchema": [
			"IdentifyInvalidRequestSchema"
		],
		"responseSchema": [
			"IdentifyErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"invalidRequestAttribute": "referenceId",
			"expectedFailureReason": "5",
			"identifyReferenceId": "ABIS3020_identify"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Identify request - missing requestId",
		"testId": "ABIS3021",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Identify request - missing requestId",
		"isNegativeTestcase": false,
		"inactive": true,
		"methodName": [
			"identify"
		],
		"requestSchema": [
			"IdentifyInvalidRequestSchema"
		],
		"responseSchema": [
			"IdentifyErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"invalidRequestAttribute": "requestId",
			"expectedFailureReason": "6",
			"identifyReferenceId": "ABIS3021_identify"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Identify request - missing request time",
		"testId": "ABIS3022",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Identify request - missing request time",
		"isNegativeTestcase": false,
		"methodName": [
			"identify"
		],
		"requestSchema": [
			"IdentifyInvalidRequestSchema"
		],
		"responseSchema": [
			"IdentifyErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"invalidRequestAttribute": "requesttime",
			"expectedFailureReason": "9",
			"identifyReferenceId": "ABIS3022_identify"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Identify request - invalid version",
		"testId": "ABIS3023",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Identify request - invalid version",
		"isNegativeTestcase": false,
		"methodName": [
			"identify"
		],
		"requestSchema": [
			"IdentifyInvalidRequestSchema"
		],
		"responseSchema": [
			"IdentifyErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"invalidRequestAttribute": "version",
			"expectedFailureReason": "13",
			"identifyReferenceId": "ABIS3023_identify"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Identify request - invalid id",
		"testId": "ABIS3024",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Identify request - invalid id",
		"isNegativeTestcase": false,
		"methodName": [
			"identify"
		],
		"requestSchema": [
			"IdentifyInvalidRequestSchema"
		],
		"responseSchema": [
			"IdentifyErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"invalidRequestAttribute": "invalidId",
			"expectedFailureReason": "14",
			"identifyReferenceId": "ABIS3024_identify"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Invalid Identify request - invalid request time format",
		"testId": "ABIS3025",
		"specVersion": "0.9.0",
		"testDescription": "Invalid Identify request - invalid request time format",
		"isNegativeTestcase": false,
		"methodName": [
			"identify"
		],
		"requestSchema": [
			"IdentifyInvalidRequestSchema"
		],
		"responseSchema": [
			"IdentifyErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"invalidRequestAttribute": "invalidRequestTime",
			"expectedFailureReason": "15",
			"identifyReferenceId": "ABIS3025_identify"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Identify - duplicate found for the referenceId (gallery skipped). <b>Clear the ABIS cache before running this testcase.</b>",
		"testId": "ABIS3026",
		"specVersion": "0.9.0",
		"testDescription": "Insert same biometrics twice, then test if duplicate is found for the referenceId, (gallery skipped)",
		"isNegativeTestcase": false,
		"methodName": [
			"insert",
			"identify"
		],
		"requestSchema": [
			"InsertRequestSchema",
			"IdentifyRequestSchema"
		],
		"responseSchema": [
			"InsertResponseSchema",
			"IdentifyResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				}
			],
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "IdentifyDuplicateFoundValidator",
					"description": "Validates the count of duplicates found by ABIS for the given referenceId"
				},
				{
					"name": "ExpectedDuplicateCountValidator",
					"description": "Validates the duplicates found to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": true,
			"insertCount": "2",
			"expectedDuplicateCount": "1",
			"identifyReferenceId": "ABIS3026_2"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Identify - duplicate found for the referenceId against gallery - where referenceId's are inserted",
		"testId": "ABIS3027",
		"specVersion": "0.9.0",
		"testDescription": "Insert same biometrics multiple times, then test if duplicate is found for the referenceId against gallery.",
		"isNegativeTestcase": false,
		"methodName": [
			"insert",
			"identify"
		],
		"requestSchema": [
			"InsertRequestSchema",
			"IdentifyRequestSchema"
		],
		"responseSchema": [
			"InsertResponseSchema",
			"IdentifyResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				}
			],
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "IdentifyDuplicateFoundValidator",
					"description": "Validates the count of duplicates found by ABIS for the given referenceId"
				},
				{
					"name": "ExpectedDuplicateCountValidator",
					"description": "Validates the duplicates found to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": true,
			"insertCount": "6",
			"expectedDuplicateCount": "4",
			"identifyReferenceId": "ABIS3027_2",
			"identifyGalleryIds": [
				"ABIS3027_1",
				"ABIS3027_3",
				"ABIS3027_4",
				"ABIS3027_5",
				"ABIS3027_6"
			]
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Identify - duplicate found for the referenceId against gallery - but the referenceId's are not inserted.",
		"testId": "ABIS3028",
		"specVersion": "0.9.0",
		"testDescription": "Insert biometrics once, then test if duplicate is found for the referenceId against gallery - but the referenceId's are not inserted.",
		"isNegativeTestcase": false,
		"methodName": [
			"insert",
			"identify"
		],
		"requestSchema": [
			"InsertRequestSchema",
			"IdentifyRequestSchema"
		],
		"responseSchema": [
			"InsertResponseSchema",
			"IdentifyErrorResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				}
			],
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedFailureReasonValidator",
					"description": "Validates the failure reason to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": false,
			"insertCount": "1",
			"expectedFailureReason": "12",
			"identifyReferenceId": "ABIS3028",
			"identifyGalleryIds": [
				"ABIS3028_1",
				"ABIS3028_2",
				"ABIS3028_3"
			]
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Identify - duplicate not found for the referenceId against gallery",
		"testId": "ABIS3029",
		"specVersion": "0.9.0",
		"testDescription": "Identify - duplicate not found for the referenceId against gallery",
		"isNegativeTestcase": false,
		"methodName": [
			"insert",
			"identify"
		],
		"requestSchema": [
			"InsertRequestSchema",
			"IdentifyRequestSchema"
		],
		"responseSchema": [
			"InsertResponseSchema",
			"IdentifyResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				}
			],
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExpectedDuplicateCountValidator",
					"description": "Validates the duplicates found to match the expected value"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": true,
			"insertCount": "3",
			"expectedDuplicateCount": "0",
			"identifyReferenceId": "ABIS3029_2",
			"identifyGalleryIds": [
				"ABIS3029_1",
				"ABIS3029_3"
			]
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Verify if ABIS is not generating new tokens for every insert request",
		"testId": "ABIS3030",
		"specVersion": "0.9.0",
		"testDescription": "Verify if ABIS is not generating new tokens for every insert request",
		"isNegativeTestcase": false,
		"inactive": true,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertRequestSchema"
		],
		"responseSchema": [
			"InsertResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},{
					"name": "ABISTokenValidator",
					"description": "Validates that ABIS is not generating a new token for every insert request, unless token has expired"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": true,
			"insertCount": "2"
		}
	},
	{
		"testCaseType": "ABIS",
		"testName": "Verify if ABIS is able to generate a new token when one has expired without sending an error response back in the queue",
		"testId": "ABIS3031",
		"specVersion": "0.9.0",
		"testDescription": "Verify if ABIS is able to generate a new token when one has expired without sending an error response back in the queue",
		"isNegativeTestcase": false,
		"inactive": true,
		"methodName": [
			"insert"
		],
		"requestSchema": [
			"InsertRequestSchema"
		],
		"responseSchema": [
			"InsertResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},{
					"name": "ABISTokenValidator",
					"description": "Validates that ABIS is not generating a new token for every insert request, unless token has expired"
				}
			]
		],
		"otherAttributes": {
			"bulkInsert": true,
			"insertCount": "2"
		}
	}
]